{{- /*gotype: tftemplate/models.ResourceTemplate*/ -}}
package scaleway

import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/scaleway/scaleway-sdk-go/scw"
)

func resourceScaleway{{ .Resource }}() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceScaleway{{ .Resource }}Create,
		ReadContext:   resourceScaleway{{ .Resource }}Read,
		UpdateContext: resourceScaleway{{ .Resource }}Update,
		DeleteContext: resourceScaleway{{ .Resource }}Delete,
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},
		//TODO: timeouts
		SchemaVersion: 0,
		Schema: map[string]*schema.Schema{
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Optional:    true,
				Description: "The {{ .ResourceCleanLow }} name",
			},
			"{{ .Locality }}":          {{ .Locality }}Schema(),
			"project_id":      projectIDSchema(),
		},
	}
}

func resourceScaleway{{ .Resource }}Create(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	api, {{ .Locality }}, err := {{ .API }}APIWith{{ .LocalityUpper }}(d, meta)
	if err != nil {
		return diag.FromErr(err)
	}

	{{ .ResourceCleanLow }}, err := api.Create{{ .ResourceClean }}(&{{ .API }}.Create{{ .ResourceClean }}Request{
		{{.LocalityUpper}}: {{.Locality}},
		ProjectID: d.Get("project_id").(string),
		Name: expandOrGenerateString(d.Get("name").(string), "{{ .ResourceCleanLow }}"),
	}, scw.WithContext(ctx))
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId(new{{ .LocalityAdjectiveUpper }}IDString({{ .Locality }}, {{ .ResourceCleanLow }}.ID))

{{if .SupportWaiters}}
	_, err = waitFor{{ .Resource }}(ctx, api, {{ .Locality }}, {{ .ResourceCleanLow }}.ID, d.Timeout(schema.TimeoutCreate))
	if err != nil {
		return diag.FromErr(err)
	}
{{end}}

	return resourceScaleway{{ .Resource }}Read(ctx, d, meta)
}

func resourceScaleway{{ .Resource }}Read(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	api, {{ .Locality }}, id, err := {{ .API }}APIWith{{ .LocalityUpper }}AndID(meta, d.Id())
	if err != nil {
		return diag.FromErr(err)
	}
{{if .SupportWaiters}}
	{{ .ResourceCleanLow }}, err := waitFor{{ .Resource }}(ctx, api, {{ .Locality }}, id, d.Timeout(schema.TimeoutRead))
	if err != nil {
		if http_errors.Is404Error(err) {
			d.SetId("")
			return nil
		}
		return diag.FromErr(err)
	}
{{- else}}
	{{.ResourceCleanLow}}, err := api.Get{{.ResourceClean}}(&{{.API}}.Get{{.ResourceClean}}Request{
		{{.ResourceClean}}ID: id,
		{{.LocalityUpper}}: {{.Locality}},
	}, scw.WithContext(ctx))
{{- end }}

	_ = d.Set("name", {{ .ResourceCleanLow }}.Name)
	_ = d.Set("{{.Locality}}", {{.ResourceCleanLow}}.{{.LocalityUpper}})
	_ = d.Set("project_id", {{.ResourceCleanLow}}.ProjectID)

	return nil
}

func resourceScaleway{{ .Resource }}Update(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	api, {{ .Locality }}, id, err := {{ .API }}APIWith{{ .LocalityUpper }}AndID(meta, d.Id())
	if err != nil {
		return diag.FromErr(err)
	}
{{if .SupportWaiters }}
	{{ .ResourceCleanLow }}, err := waitFor{{ .Resource }}(ctx, api, {{ .Locality }}, id, d.Timeout(schema.TimeoutUpdate))
	if err != nil {
		if http_errors.Is404Error(err) {
			d.SetId("")
			return nil
		}
		return diag.FromErr(err)
	}
{{- end}}
	req := &{{ .API }}.Update{{ .ResourceClean }}Request{
		{{ .LocalityUpper }}:      {{.Locality}},
		{{ .ResourceClean }}ID: {{if .SupportWaiters}}{{ .ResourceCleanLow }}.ID{{else}}id{{end}},
	}

	if d.HasChange("name") {
		req.Name = expandUpdatedStringPtr(d.Get("name"))
	}

	if _, err := api.Update{{ .ResourceClean }}(req, scw.WithContext(ctx)); err != nil {
		return diag.FromErr(err)
	}

	return resourceScaleway{{ .Resource }}Read(ctx, d, meta)
}

func resourceScaleway{{ .Resource }}Delete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	api, {{ .Locality }}, id, err := {{ .API }}APIWith{{ .LocalityUpper }}AndID(meta, d.Id())
	if err != nil {
		return diag.FromErr(err)
	}
{{if .SupportWaiters}}
	_, err = waitFor{{ .Resource }}(ctx, api, {{ .Locality }}, id, d.Timeout(schema.TimeoutDelete))
	if err != nil {
		return diag.FromErr(err)
	}
{{- end}}
	_, err = api.Delete{{ .ResourceClean }}(&{{ .API }}.Delete{{ .ResourceClean}}Request{
		{{ .LocalityUpper }}:      {{ .Locality }},
		{{ .ResourceClean }}ID: id,
	}, scw.WithContext(ctx))
	if err != nil {
		return diag.FromErr(err)
	}

{{- if .SupportWaiters}}
	_, err = waitFor{{ .Resource }}(ctx, api, {{ .Locality }}, id, d.Timeout(schema.TimeoutDelete))
	if err != nil && !http_errors.Is404Error(err) {
		return diag.FromErr(err)
	}
{{- end}}

	return nil
}
